/*********************************************************************
 * Name:      	main.cpp
 * Purpose:   	Implements simple wxWidgets application with GUI
 * 				created using wxFormBuilder.
 * Author:    
 * Created:   
 * Copyright: 
 * License:   	wxWidgets license (www.wxwidgets.org)
 * 
 * Notes:		Note that all GUI creation code is implemented in
 * 				gui.cpp source file which is generated by wxFormBuilder.
 *********************************************************************/

#include "main.h"

// initialize the application
IMPLEMENT_APP(MainApp);

////////////////////////////////////////////////////////////////////////////////
// application class implementation 
////////////////////////////////////////////////////////////////////////////////

bool MainApp::OnInit()
{
	SetTopWindow( new MainFrame( NULL ) );
	GetTopWindow()->Show();
	
	// true = enter the main loop
	return true;
}

////////////////////////////////////////////////////////////////////////////////
// main application frame implementation 
////////////////////////////////////////////////////////////////////////////////

MainFrame::MainFrame(wxWindow *parent) : MainFrameBase( parent )
{
	serComm = new ce::ceSerial();
	ignoreLF = true;
	
	addListPort();
	addListBaud();
	
	devPort  = m_chPort->GetString(m_chPort->GetSelection());
	devBaud  = wxAtoi(m_chBaud->GetString(m_chBaud->GetSelection()));
	
	m_serTimer = new wxTimer();
	m_serTimer->Bind(wxEVT_TIMER,&MainFrame::onTimerTick,this);
	
	m_btnPortOpen->SetLabel("Open");
	m_btnPortReload->Enable(true);
	m_statusBar->SetStatusText("Closed: "+devPort+"-"+wxString::Format(wxT("%lu"),devBaud)+"-8N1",0);
}

MainFrame::~MainFrame()
{
}

void MainFrame::OnCloseFrame(wxCloseEvent& event)
{
	closingPort();
	Destroy();
}

void MainFrame::OnExitClick(wxCommandEvent& event)
{
	closingPort();
	Destroy();
}

void MainFrame::closingPort(void){
	if(serComm->IsOpened()){
		m_serTimer->Stop();
		serComm->Close();
		m_btnPortOpen->SetLabel("Open");
		m_btnPortReload->Enable(true);
	}
}

void MainFrame::onPortChoice( wxCommandEvent& event ){
	devPort  = m_chPort->GetString(m_chPort->GetSelection());
}

void MainFrame::onBaudChoice( wxCommandEvent& event ){
	devBaud  = wxAtoi(m_chBaud->GetString(m_chBaud->GetSelection()));
}

void MainFrame::onTimerTick(wxTimerEvent& event){
	char chr;
	bool isReceive;
	
	do{
		chr = serComm->ReadChar(isReceive);
		if(isReceive) onCharReceive(chr);
	}while(isReceive);
}

void MainFrame::onCharReceive(char ch){
	if(ignoreLF){
		if(ch=='\r')return;
	}
	m_txtTermOut->AppendText(wxString::Format(wxT("%c"),ch));
}

void MainFrame::addListPort(void){
#ifdef ceWINDOWS
	m_chPort->Append(_("\\\\.\\COM1"));
	m_chPort->Append(_("\\\\.\\COM2"));
	m_chPort->Append(_("\\\\.\\COM3"));
	m_chPort->Append(_("\\\\.\\COM4"));
	m_chPort->Append(_("\\\\.\\COM5"));
	m_chPort->Append(_("\\\\.\\COM6"));
#else
	m_chPort->Append(_("/dev/ttyUSB0"));
	m_chPort->Append(_("/dev/ttyUSB1"));
	m_chPort->Append(_("/dev/ttyUSB2"));
	m_chPort->Append(_("/dev/ttyACM0"));
	m_chPort->Append(_("/dev/ttyACM1"));
	m_chPort->Append(_("/dev/ttyACM2"));
#endif

	m_chPort->SetSelection(0);
}

void MainFrame::addListBaud(void){
	m_chBaud->Append(_("4800"));
	m_chBaud->Append(_("9600"));
	m_chBaud->Append(_("38400"));
	m_chBaud->Append(_("57600"));
	m_chBaud->Append(_("115200"));

	m_chBaud->SetSelection(1);
}

void MainFrame::OnBtnPortOpen( wxCommandEvent& event ){
	if(m_btnPortOpen->GetLabel()=="Open"){
	
		if(!serComm->IsOpened()){
			serComm->SetComPort(devPort.ToStdString());
			serComm->SetBaudRate(devBaud);
			
			serComm->SetDataSize(8);
			serComm->SetParity('N');
			serComm->SetStopBits(1);
			serComm->SetDTR(false);
			serComm->SetRTS(false);
			
			if(serComm->Open()==0){
				m_btnPortOpen->SetLabel("Close");
				m_statusBar->SetStatusText("Opened: "+devPort+"-"+wxString::Format(wxT("%lu"),devBaud)+"-8N1",0);
				m_serTimer->Start(10);
				m_btnPortReload->Enable(false);
			}
			else{
				m_btnPortOpen->SetLabel("Open");
				m_statusBar->SetStatusText("Failed: "+devPort+"-"+wxString::Format(wxT("%lu"),devBaud)+"-8N1",0);
				m_serTimer->Stop();
				m_btnPortReload->Enable(true);
			}
		}
	}
	else{
		closingPort();
	}
}

char* MainFrame::wxstr2char(wxString& Text){
	std::string strBuff = Text.ToStdString();
	
	int size = strBuff.size();
	char *a = new char[size+1];
	a[strBuff.size()] = 0;
	memcpy(a , Text.c_str(), size);
	
	return a;
}

void MainFrame::OnBtnSend( wxCommandEvent& event ){
	if(serComm->IsOpened()){
		strRequest = m_txtTermIn->GetValue();
		strRequest += "\r\n";
		
		serComm->Write(wxstr2char(strRequest));
		m_statusBar->SetStatusText(strRequest+" sent",1);
		m_txtTermIn->Clear();
	}
	else{
		m_statusBar->SetStatusText("Port "+devPort+" is not opened",1);
	}
}

void MainFrame::OnBtnAbout( wxCommandEvent& event ) {
	wxAboutDialogInfo info;
	
	wxString license = 
L"The MIT License\n"
L"\n"
L"Copyright (c) 2021 by Achmadi \n"
L"\n"
L"Permission is hereby granted, free of charge, to any person obtaining\n"
L"a copy of this software and associated documentation files (the\n"
L"\"Software\"), to deal in the Software without restriction, including\n"
L"without limitation the rights to use, copy, modify, merge, publish,\n"
L"distribute, sublicense, and/or sell copies of the Software, and to\n"
L"permit persons to whom the Software is furnished to do so, subject to\n"
L"the following conditions:\n"
L"\n"
L"The above copyright notice and this permission notice shall be\n"
L"included in all copies or substantial portions of the Software.\n"
L"\n"
L"THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n"
L"EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n"
L"MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n"
L"NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\n"
L"LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n"
L"OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\n"
L"WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
L"\n";
	
	wxString Desc = "Libraries: \n";
	
	Desc = Desc + "wxWidget (v" 
			+ wxString::Format(wxT("%i"),wxMAJOR_VERSION) + "." 
			+ wxString::Format(wxT("%i"),wxMINOR_VERSION) + "."
			+ wxString::Format(wxT("%i"),wxRELEASE_NUMBER) + ")\n";
			
	Desc = Desc + "ceSerial (git)"; 		
	
	info.SetName("Simple Serial Terminal");
    info.SetCopyright(_("Achmadi ST MT @2021"));
    info.SetLicence(license);
    info.SetDescription(Desc);

	wxAboutBox(info);
}